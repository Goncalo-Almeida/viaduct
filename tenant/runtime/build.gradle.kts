plugins {
    id("kotlin-project")
    id("kotlin-static-analysis")
    `java-test-fixtures`
}

dependencies {
    api(libs.graphql.java)
    api(libs.guice)
    api(libs.javax.inject)
    api(libs.viaduct.engine.api)
    api(libs.viaduct.service.api)
    api(libs.viaduct.tenant.api)

    implementation(libs.viaduct.shared.graphql)
    implementation(libs.viaduct.shared.utils)
    implementation(libs.classgraph)
    implementation(libs.guava)
    implementation(libs.slf4j.api)
    implementation(libs.kotlin.reflect)
    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.kotlinx.coroutines.core.jvm)

    testFixturesImplementation(libs.viaduct.engine.api)
    testFixturesImplementation(libs.viaduct.engine.runtime)
    testFixturesImplementation(libs.viaduct.service.api)
    testFixturesImplementation(libs.viaduct.tenant.api)
    testFixturesImplementation(testFixtures(libs.viaduct.tenant.api))
    testFixturesImplementation(libs.graphql.java)
    testFixturesImplementation(libs.io.mockk.jvm)
    testFixturesImplementation(libs.kotlin.reflect)
    testFixturesImplementation(libs.kotlinx.coroutines.core)

    testImplementation(testFixtures(libs.viaduct.engine.api))
    testImplementation(testFixtures(libs.viaduct.service.api))
    testImplementation(testFixtures(libs.viaduct.shared.graphql))
    testImplementation(testFixtures(libs.viaduct.tenant.api))
    testImplementation(libs.viaduct.engine.runtime)
    testImplementation(libs.viaduct.service.runtime)
    testImplementation(libs.viaduct.shared.arbitrary)
    testImplementation(libs.io.mockk.dsl)
    testImplementation(libs.io.mockk.jvm)
    testImplementation(libs.jackson.core)
    testImplementation(libs.jackson.databind)
    testImplementation(libs.jackson.module)
    testImplementation(libs.kotest.property.jvm)
    testImplementation(libs.kotlinx.coroutines.jdk8)
    testImplementation(libs.kotlinx.coroutines.test)
    testImplementation(libs.strikt.core)
    testImplementation(libs.micrometer.core)
}

// afterEvaluate {
//     // TODO: a hack for the sake of this dependency-analysis task...
//     tasks.named("explodeCodeSourceTest") {
//         dependsOn(tasks.named("generateBackingdataSchemaObjects"))
//         dependsOn(tasks.named("generateBackingdataSchemaObjects"))
//         dependsOn(tasks.named("generateBackingdataTenant"))
//         dependsOn(tasks.named("generateBatchresolvererrorhandlingSchemaObjects"))
//         dependsOn(tasks.named("generateBatchresolvererrorhandlingTenant"))
//         dependsOn(tasks.named("generateContextfactorySchemaObjects"))
//         dependsOn(tasks.named("generateContextfactoryTenant"))
//         dependsOn(tasks.named("generateEmptyvariablesSchemaObjects"))
//         dependsOn(tasks.named("generateEmptyvariablesTenant"))
//         dependsOn(tasks.named("generateFeatureschemaSchemaObjects"))
//         dependsOn(tasks.named("generateFeatureschemaTenant"))
//         dependsOn(tasks.named("generateFieldbatchresolverSchemaObjects"))
//         dependsOn(tasks.named("generateFieldbatchresolverTenant"))
//         dependsOn(tasks.named("generateGlobalidSchemaObjects"))
//         dependsOn(tasks.named("generateGlobalidTenant"))
//         dependsOn(tasks.named("generateIdofSchemaObjects"))
//         dependsOn(tasks.named("generateIdofTenant"))
//         dependsOn(tasks.named("generateIncludedirectiveSchemaObjects"))
//         dependsOn(tasks.named("generateIncludedirectiveTenant"))
//         dependsOn(tasks.named("generateInterfacetypesSchemaObjects"))
//         dependsOn(tasks.named("generateInterfacetypesTenant"))
//         dependsOn(tasks.named("generateInvalidfragmentsyntaxSchemaObjects"))
//         dependsOn(tasks.named("generateInvalidfragmentsyntaxTenant"))
//         dependsOn(tasks.named("generateInvalidobjectfragmentSchemaObjects"))
//         dependsOn(tasks.named("generateInvalidobjectfragmentTenant"))
//         dependsOn(tasks.named("generateInvalidqueryfragmentSchemaObjects"))
//         dependsOn(tasks.named("generateInvalidqueryfragmentTenant"))
//         dependsOn(tasks.named("generateInvalidsyntaxSchemaObjects"))
//         dependsOn(tasks.named("generateInvalidsyntaxTenant"))
//         dependsOn(tasks.named("generateNoderesolverSchemaObjects"))
//         dependsOn(tasks.named("generateNoderesolverTenant"))
//         dependsOn(tasks.named("generateNonexistenttypesSchemaObjects"))
//         dependsOn(tasks.named("generateNonexistenttypesTenant"))
//         dependsOn(tasks.named("generateNullfornonnullableSchemaObjects"))
//         dependsOn(tasks.named("generateNullfornonnullableTenant"))
//         dependsOn(tasks.named("generateObjecttypesSchemaObjects"))
//         dependsOn(tasks.named("generateObjecttypesTenant"))
//         dependsOn(tasks.named("generateQueryselectionsSchemaObjects"))
//         dependsOn(tasks.named("generateQueryselectionsTenant"))
//         dependsOn(tasks.named("generateReflectionSchemaObjects"))
//         dependsOn(tasks.named("generateReflectionTenant"))
//         dependsOn(tasks.named("generateScopesSchemaObjects"))
//         dependsOn(tasks.named("generateScopesTenant"))
//         dependsOn(tasks.named("generateSelectionsetSchemaObjects"))
//         dependsOn(tasks.named("generateSelectionsetTenant"))
//         dependsOn(tasks.named("generateSelectSchemaObjects"))
//         dependsOn(tasks.named("generateSelectTenant"))
//         dependsOn(tasks.named("generateSubmutationSchemaObjects"))
//         dependsOn(tasks.named("generateSubmutationTenant"))
//         dependsOn(tasks.named("generateTemponeofviolationSchemaObjects"))
//         dependsOn(tasks.named("generateTemponeofviolationTenant"))
//         dependsOn(tasks.named("generateUniontypesSchemaObjects"))
//         dependsOn(tasks.named("generateUniontypesTenant"))
//         dependsOn(tasks.named("generateVariablesproviderexceptionSchemaObjects"))
//         dependsOn(tasks.named("generateVariablesproviderexceptionTenant"))
//         dependsOn(tasks.named("generateVariablesproviderSchemaObjects"))
//         dependsOn(tasks.named("generateVariablesproviderTenant"))
//         dependsOn(tasks.named("generateTenantapibootstrapperSchemaObjects"))
//         dependsOn(tasks.named("generateTenantapibootstrapperTenant"))
//     }
// }
